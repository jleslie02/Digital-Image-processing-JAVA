
import java.awt.Color;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Leslie BAMOU
 */
public class MIDappDIP extends javax.swing.JFrame{
private Images original ;
private javax.swing.JTextField [] bandTextF ;
private javax.swing.JTextField [][][] imageTextF;
 ImageFiltering imgLinearFiltered ;
 ImageFiltering imgAdapFiltered;
 Morphology imgAnalysis;
 private java.util.Random gene;
 
    // Variables declaration - do not modify
    private javax.swing.JScrollPane errorLinearDisplayScrollPane;
    private javax.swing.JLabel filterLinearBorFillLabl;
    private javax.swing.JComboBox filterLinearBorderFillCombo;
    private javax.swing.JLabel filterLinearChoiceLabel;
    private javax.swing.JComboBox filterLinearCombo;
    private javax.swing.JComboBox filterLinearDirCombo;
    private javax.swing.JLabel filterLinearDirLabel;
    private javax.swing.JPanel imageLinearFilterPanel;
    private javax.swing.JScrollPane imageLinearFilterScrollPane;
    private javax.swing.JSeparator linearFilerSeparator;
    private javax.swing.JPanel linearFilterChoicePanel;
    private javax.swing.JTextArea linearFilterDisplayTextArea;
    private javax.swing.JLabel logoLinearFilterLabel;
    private javax.swing.JButton okLinearFilterButton;
    private javax.swing.JLabel okLinearFilterLabel;
    private javax.swing.JPanel mainLinearPanel;
    
    
    
    ///////////// ADAP VARIABLES
        private javax.swing.JPanel AdapFilterChoicePanel;
    private javax.swing.JComboBox adapFilterCombo;
    private javax.swing.JTextArea adapFilterDisplayTextArea;
    private javax.swing.JComboBox adapFilterFactorCombo;
    private javax.swing.JLabel adapFilterFactorLabel;
    private javax.swing.JScrollPane errorMainAdapDisplayScrollPane;
    private javax.swing.JLabel filterAdapChoiceLabel;
    private javax.swing.JPanel imageAdapFilterPanel;
    private javax.swing.JScrollPane imageAdapFilterScrollPane;
    private javax.swing.JLabel logoAdapLabel;
    private javax.swing.JSeparator mainAdapSeparator;
    private javax.swing.JButton okAdapFilterButton;
    private javax.swing.JLabel okAdapFilterLabel;
    private javax.swing.JPanel mainAdapPanel;
    private javax.swing.JLabel filterAdapBorFillLabl;
    private javax.swing.JComboBox filterAdapBorderFillCombo;

    // End of variables declaration
    
    
    /// MORPHOLOGY VAR
        private javax.swing.JPanel analysisChoicePanel;
    private javax.swing.JComboBox analyzeCombo;
    private javax.swing.JLabel analyzeLabel;
    private javax.swing.JLabel analyzeOkLabel;
    private javax.swing.JLabel binarizationBrocessLabel;
    private javax.swing.JButton binarizeButton;
    private javax.swing.JPanel binaryChoicePanel;
    private javax.swing.JTextArea binaryDisplayTextArea;
    private javax.swing.JScrollPane errorMainMorphDisplayScrollPane;
    private javax.swing.JPanel imageAnalysisPanel;
    private javax.swing.JScrollPane imageAnalysisScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel logoAnalyzeLabel;
    private javax.swing.JSeparator mainMorphSeparator;
    private javax.swing.JButton okAnalyzeButton;
    private javax.swing.JTextField orderCombo;
    private javax.swing.JLabel orderLabel;
    private javax.swing.JLabel tresholdDefinitionLabel;
    private javax.swing.JLabel tresholdFromLabel;
    private javax.swing.JTextField tresholdFromTextF;
    private javax.swing.JLabel tresholdToLabel;
    private javax.swing.JTextField tresholdToTextF;
    private javax.swing.JPanel mainMorphologyPanel;
    private javax.swing.JComboBox morphBorderFillCombo;
    private javax.swing.JLabel morphBorFillLabl ;
    
    /**
     * Creates new form MIDappDIP
     */
    public MIDappDIP() {
        initComponents();
        linearFiltering();
        adaptativeFiltering();
        morphologycalAnalysis();
        
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void morphologycalAnalysis(){
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

        mainMorphologyPanel = new javax.swing.JPanel();
             binaryChoicePanel = new javax.swing.JPanel();
        binarizeButton = new javax.swing.JButton();
        binarizationBrocessLabel = new javax.swing.JLabel();
        tresholdDefinitionLabel = new javax.swing.JLabel();
        tresholdFromLabel = new javax.swing.JLabel();
        tresholdToLabel = new javax.swing.JLabel();
        tresholdFromTextF = new javax.swing.JTextField();
        tresholdToTextF = new javax.swing.JTextField();
        errorMainMorphDisplayScrollPane = new javax.swing.JScrollPane();
        binaryDisplayTextArea = new javax.swing.JTextArea();
        mainMorphSeparator = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        imageAnalysisScrollPane = new javax.swing.JScrollPane();
        imageAnalysisPanel = new javax.swing.JPanel();
        analysisChoicePanel = new javax.swing.JPanel();
        analyzeCombo = new javax.swing.JComboBox();
        analyzeLabel = new javax.swing.JLabel();
        orderLabel = new javax.swing.JLabel();
        orderCombo = new javax.swing.JTextField();
        okAnalyzeButton = new javax.swing.JButton();
        logoAnalyzeLabel = new javax.swing.JLabel();
        analyzeOkLabel = new javax.swing.JLabel();
        morphBorderFillCombo = new javax.swing.JComboBox();
        morphBorFillLabl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        mainMorphologyPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainMorphologyPanel.setPreferredSize(new java.awt.Dimension(1220, 528));
        mainMorphologyPanel.setLayout(null);

        binaryChoicePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        binaryChoicePanel.setOpaque(false);

        binarizeButton.setBackground(new java.awt.Color(153, 153, 153));
        binarizeButton.setText("Binarize");
        binarizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarizeButtonActionPerformed(evt);
            }
        });

        binarizationBrocessLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        binarizationBrocessLabel.setText("Binarization process:");

        tresholdDefinitionLabel.setText("Treshold definition:");

        tresholdFromLabel.setText("From:");

        tresholdToLabel.setText("to");

        tresholdFromTextF.setColumns(5);
        tresholdFromTextF.setText("(int)");

        tresholdToTextF.setColumns(5);
        tresholdToTextF.setText("(int)");
     
        errorMainMorphDisplayScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        errorMainMorphDisplayScrollPane.setOpaque(false);

        binaryDisplayTextArea.setColumns(10);
        binaryDisplayTextArea.setEditable(false);
        binaryDisplayTextArea.setFont(new java.awt.Font("Mongolian Baiti", 1, 14)); // NOI18N
        binaryDisplayTextArea.setForeground(new java.awt.Color(51, 153, 0));
        binaryDisplayTextArea.setLineWrap(true);
        binaryDisplayTextArea.setRows(5);
        binaryDisplayTextArea.setText("... Enter the characteristics for the            filtering process ...");
        binaryDisplayTextArea.setToolTipText("");
        binaryDisplayTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        errorMainMorphDisplayScrollPane.setViewportView(binaryDisplayTextArea);

        javax.swing.GroupLayout binaryChoicePanelLayout = new javax.swing.GroupLayout(binaryChoicePanel);
        binaryChoicePanel.setLayout(binaryChoicePanelLayout);
        binaryChoicePanelLayout.setHorizontalGroup(
            binaryChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(binaryChoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(binaryChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(binarizationBrocessLabel)
                    .addComponent(tresholdDefinitionLabel)
                    .addGroup(binaryChoicePanelLayout.createSequentialGroup()
                        .addGroup(binaryChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(binaryChoicePanelLayout.createSequentialGroup()
                                .addComponent(tresholdFromLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tresholdFromTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(tresholdToLabel))
                            .addComponent(binarizeButton))
                        .addGap(18, 18, 18)
                        .addComponent(tresholdToTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addComponent(errorMainMorphDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        binaryChoicePanelLayout.setVerticalGroup(
            binaryChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(binaryChoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(binaryChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorMainMorphDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(binaryChoicePanelLayout.createSequentialGroup()
                        .addComponent(binarizationBrocessLabel)
                        .addGap(18, 18, 18)
                        .addComponent(tresholdDefinitionLabel)
                        .addGap(18, 18, 18)
                        .addGroup(binaryChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tresholdFromLabel)
                            .addComponent(tresholdFromTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tresholdToLabel)
                            .addComponent(tresholdToTextF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(binarizeButton)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        mainMorphologyPanel.add(binaryChoicePanel);
        binaryChoicePanel.setBounds(30, 60, 430, 170);

        mainMorphSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        mainMorphologyPanel.add(mainMorphSeparator);
        mainMorphSeparator.setBounds(510, 30, 10, 510);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/processing00 - Copy.png"))); // NOI18N
        jLabel1.setText("Binarized image:");
        jLabel1.setToolTipText("");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        mainMorphologyPanel.add(jLabel1);
        jLabel1.setBounds(550, 120, 560, 80);

        imageAnalysisPanel.setBackground(new java.awt.Color(255, 255, 255));
        imageAnalysisPanel.setLayout(new java.awt.GridLayout(1, 0));
        imageAnalysisScrollPane.setViewportView(imageAnalysisPanel);

        mainMorphologyPanel.add(imageAnalysisScrollPane);
        imageAnalysisScrollPane.setBounds(550, 200, 560, 270);

        analysisChoicePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        analysisChoicePanel.setOpaque(false);

        analyzeCombo.setBackground(new java.awt.Color(153, 153, 153));
        analyzeCombo.setForeground(new java.awt.Color(0, 51, 51));
        analyzeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Erosion", "Dilation", "Opening", "Closure", "White top Hat", "Black Top Hat", "squelettization" }));

        analyzeLabel.setText("Analysis techniques:");

        orderLabel.setText("Order:");

        orderCombo.setColumns(5);
        orderCombo.setText("1");
        orderCombo.setToolTipText("");
        orderCombo.setSelectionColor(new java.awt.Color(204, 204, 204));
     
        okAnalyzeButton.setBackground(new java.awt.Color(204, 0, 204));
        okAnalyzeButton.setText("Analyze");
        okAnalyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okAnalyzeButtonActionPerformed(evt);
            }
        });

        logoAnalyzeLabel.setForeground(new java.awt.Color(102, 102, 102));
        logoAnalyzeLabel.setText(" ------------------ Input: Analysis process characteristic -----------------------------------------");

        analyzeOkLabel.setText("confirm:");

        morphBorderFillCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Zeros method", "Simple symmetry", "Circular symmetry" }));

        morphBorFillLabl.setText("Border filling method:");

        javax.swing.GroupLayout analysisChoicePanelLayout = new javax.swing.GroupLayout(analysisChoicePanel);
        analysisChoicePanel.setLayout(analysisChoicePanelLayout);
        analysisChoicePanelLayout.setHorizontalGroup(
            analysisChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, analysisChoicePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(analyzeOkLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(okAnalyzeButton)
                .addGap(29, 29, 29))
            .addGroup(analysisChoicePanelLayout.createSequentialGroup()
                .addComponent(logoAnalyzeLabel)
                .addGap(0, 2, Short.MAX_VALUE))
            .addGroup(analysisChoicePanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(analysisChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(analyzeLabel)
                    .addComponent(orderLabel)
                    .addComponent(morphBorFillLabl))
                .addGap(18, 18, 18)
                .addGroup(analysisChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(morphBorderFillCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(analyzeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        analysisChoicePanelLayout.setVerticalGroup(
            analysisChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisChoicePanelLayout.createSequentialGroup()
                .addComponent(logoAnalyzeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(analysisChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(analysisChoicePanelLayout.createSequentialGroup()
                        .addGroup(analysisChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(analyzeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(analyzeLabel))
                        .addGap(18, 18, 18)
                        .addComponent(morphBorFillLabl))
                    .addComponent(morphBorderFillCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(analysisChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(analysisChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okAnalyzeButton)
                    .addComponent(analyzeOkLabel))
                .addContainerGap())
        );

        mainMorphologyPanel.add(analysisChoicePanel);
        analysisChoicePanel.setBounds(30, 280, 430, 220);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pointCloudProcessing.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        mainMorphologyPanel.add(jLabel2);
        jLabel2.setBounds(0, 0, 1230, 560);
        
    }
    

    
    private void adaptativeFiltering(){
        
           mainAdapPanel = new javax.swing.JPanel();
       imageAdapFilterScrollPane = new javax.swing.JScrollPane();
        imageAdapFilterPanel = new javax.swing.JPanel();
        AdapFilterChoicePanel = new javax.swing.JPanel();
        filterAdapChoiceLabel = new javax.swing.JLabel();
        adapFilterFactorLabel = new javax.swing.JLabel();
        adapFilterCombo = new javax.swing.JComboBox();
        errorMainDisplayScrollPane = new javax.swing.JScrollPane();
        adapFilterDisplayTextArea = new javax.swing.JTextArea();
        okAdapFilterLabel = new javax.swing.JLabel();
        okAdapFilterButton = new javax.swing.JButton();
        adapFilterFactorCombo = new javax.swing.JComboBox();
        filterAdapBorFillLabl = new javax.swing.JLabel();
        filterAdapBorderFillCombo = new javax.swing.JComboBox();
        mainAdapSeparator = new javax.swing.JSeparator();
        logoAdapLabel = new javax.swing.JLabel();
                

        mainAdapPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainAdapPanel.setPreferredSize(new java.awt.Dimension(1226, 528));
        mainAdapPanel.setLayout(null);

        imageAdapFilterPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout imageAdapFilterPanelLayout = new javax.swing.GroupLayout(imageAdapFilterPanel);
        imageAdapFilterPanel.setLayout(imageAdapFilterPanelLayout);
        imageAdapFilterPanelLayout.setHorizontalGroup(
            imageAdapFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 668, Short.MAX_VALUE)
        );
        imageAdapFilterPanelLayout.setVerticalGroup(
            imageAdapFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );

        imageAdapFilterScrollPane.setViewportView(imageAdapFilterPanel);

        mainAdapPanel.add(imageAdapFilterScrollPane);
        imageAdapFilterScrollPane.setBounds(580, 130, 620, 290);

        AdapFilterChoicePanel.setBackground(new java.awt.Color(255, 255, 255));
        AdapFilterChoicePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        AdapFilterChoicePanel.setOpaque(false);

        filterAdapChoiceLabel.setText("Types of filters:");

        adapFilterFactorLabel.setText("Factor:");

        adapFilterCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "LEE filter", "Alternated LEE filter", "MAP filter", "Gamma filter", "Frost filter" }));
     

        errorMainDisplayScrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        adapFilterDisplayTextArea.setColumns(20);
        adapFilterDisplayTextArea.setEditable(false);
        adapFilterDisplayTextArea.setFont(new java.awt.Font("Mongolian Baiti", 0, 14)); // NOI18N
        adapFilterDisplayTextArea.setForeground(new java.awt.Color(51, 153, 0));
        adapFilterDisplayTextArea.setLineWrap(true);
        adapFilterDisplayTextArea.setRows(5);
        adapFilterDisplayTextArea.setText("... Enter the characteristics for the            filtering process ...");
        adapFilterDisplayTextArea.setToolTipText("");
        errorMainDisplayScrollPane.setViewportView(adapFilterDisplayTextArea);

        okAdapFilterLabel.setText("Confirm:");

        okAdapFilterButton.setText("OK");
        okAdapFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okAdapFilterButtonActionPerformed(evt);
            }
        });

        adapFilterFactorCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2" }));
    

        filterAdapBorFillLabl.setText("Border filling method:");

        filterAdapBorderFillCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Zeros method", "Simple symmetry", "Circular symmetry" }));
     
        javax.swing.GroupLayout AdapFilterChoicePanelLayout = new javax.swing.GroupLayout(AdapFilterChoicePanel);
        AdapFilterChoicePanel.setLayout(AdapFilterChoicePanelLayout);
        AdapFilterChoicePanelLayout.setHorizontalGroup(
            AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AdapFilterChoicePanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdapFilterChoicePanelLayout.createSequentialGroup()
                        .addComponent(filterAdapBorFillLabl)
                        .addGap(18, 18, 18)
                        .addComponent(filterAdapBorderFillCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AdapFilterChoicePanelLayout.createSequentialGroup()
                        .addGroup(AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterAdapChoiceLabel)
                            .addComponent(adapFilterFactorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(adapFilterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(adapFilterFactorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(errorMainDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdapFilterChoicePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okAdapFilterLabel)
                .addGap(41, 41, 41)
                .addComponent(okAdapFilterButton)
                .addGap(85, 85, 85))
        );
        AdapFilterChoicePanelLayout.setVerticalGroup(
            AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AdapFilterChoicePanelLayout.createSequentialGroup()
                .addGroup(AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AdapFilterChoicePanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterAdapBorFillLabl)
                            .addComponent(filterAdapBorderFillCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterAdapChoiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(adapFilterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(adapFilterFactorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(adapFilterFactorCombo))
                        .addGap(67, 67, 67))
                    .addGroup(AdapFilterChoicePanelLayout.createSequentialGroup()
                        .addComponent(errorMainDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(AdapFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okAdapFilterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okAdapFilterButton))
                .addGap(51, 51, 51))
        );
        
        mainAdapPanel.add(AdapFilterChoicePanel);
        AdapFilterChoicePanel.setBounds(40, 170, 470, 220);

        mainAdapSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        mainAdapPanel.add(mainAdapSeparator);
        mainSeparator.setBounds(560, 20, 14, 470);

        logoAdapLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoAdapLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pointCloudProcessing.jpg"))); // NOI18N
        logoAdapLabel.setText("jLabel1");
        mainAdapPanel.add(logoAdapLabel);
        logoAdapLabel.setBounds(0, 0, 1230, 640);
    }

                                                             

      private void linearFiltering() {
        mainLinearPanel = new javax.swing.JPanel();
     linearFilterChoicePanel = new javax.swing.JPanel();
     
        filterLinearChoiceLabel = new javax.swing.JLabel();
        filterLinearBorFillLabl = new javax.swing.JLabel();
        filterLinearDirLabel = new javax.swing.JLabel();
        filterLinearCombo = new javax.swing.JComboBox();
        errorMainDisplayScrollPane = new javax.swing.JScrollPane();
        linearFilterDisplayTextArea = new javax.swing.JTextArea();
        okLinearFilterLabel = new javax.swing.JLabel();
        okLinearFilterButton = new javax.swing.JButton();
        filterLinearDirCombo = new javax.swing.JComboBox();
        filterLinearBorderFillCombo = new javax.swing.JComboBox();
        logoLinearFilterLabel = new javax.swing.JLabel();
        linearFilerSeparator = new javax.swing.JSeparator();
        imageLinearFilterScrollPane = new javax.swing.JScrollPane();
        imageLinearFilterPanel = new javax.swing.JPanel();
   
        mainLinearPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainLinearPanel.setPreferredSize(new java.awt.Dimension(1226, 528));
        mainLinearPanel.setLayout(null);

        linearFilterChoicePanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        linearFilterChoicePanel.setOpaque(false);

        filterLinearChoiceLabel.setText("Choose filter:");

        filterLinearBorFillLabl.setText("Border filling method:");

        filterLinearDirLabel.setText("Direction:");

        filterLinearCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Robert filter", "Sober filter", "Prewitt filter", "Kirsh filter" }));

        linearFilterDisplayTextArea.setColumns(20);
        linearFilterDisplayTextArea.setFont(new java.awt.Font("Mongolian Baiti", 0, 14)); // NOI18N
        linearFilterDisplayTextArea.setForeground(new java.awt.Color(51, 153, 0));
        linearFilterDisplayTextArea.setLineWrap(true);
        linearFilterDisplayTextArea.setRows(5);
        linearFilterDisplayTextArea.setText("... Enter the characteristics for the            filtering process ...");
        linearFilterDisplayTextArea.setToolTipText("");
        errorMainDisplayScrollPane.setViewportView(linearFilterDisplayTextArea);
         errorMainDisplayScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        okLinearFilterLabel.setText("Confirm:");

        okLinearFilterButton.setText("OK");
       
         okLinearFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okLinearFilterButtonActionPerformed(evt);} });

        filterLinearDirCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "X(horizontal)", "Y(vertical)", "45°", "90°" }));

        filterLinearBorderFillCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Zeros method", "Simple symmetry", "Circular symmetry" }));

        logoLinearFilterLabel.setForeground(new java.awt.Color(102, 102, 102));
        logoLinearFilterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoLinearFilterLabel.setText("-------------------------  Input: Filtering process characteristic ---------------------------------------------------");

        javax.swing.GroupLayout linearFilterChoicePanelLayout = new javax.swing.GroupLayout(linearFilterChoicePanel);
        linearFilterChoicePanel.setLayout(linearFilterChoicePanelLayout);
        linearFilterChoicePanelLayout.setHorizontalGroup(
            linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linearFilterChoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(linearFilterChoicePanelLayout.createSequentialGroup()
                        .addGroup(linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterLinearChoiceLabel)
                            .addComponent(filterLinearDirLabel)
                            .addComponent(filterLinearBorFillLabl))
                        .addGap(18, 18, 18)
                        .addGroup(linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterLinearBorderFillCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(linearFilterChoicePanelLayout.createSequentialGroup()
                                .addGroup(linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(filterLinearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filterLinearDirCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(errorMainDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, linearFilterChoicePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okLinearFilterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okLinearFilterButton)
                        .addGap(75, 75, 75))))
            .addGroup(linearFilterChoicePanelLayout.createSequentialGroup()
                .addComponent(logoLinearFilterLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        linearFilterChoicePanelLayout.setVerticalGroup(
            linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, linearFilterChoicePanelLayout.createSequentialGroup()
                .addComponent(logoLinearFilterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(linearFilterChoicePanelLayout.createSequentialGroup()
                        .addGroup(linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterLinearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterLinearChoiceLabel))
                        .addGap(27, 27, 27)
                        .addGroup(linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(filterLinearDirLabel)
                            .addComponent(filterLinearDirCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(filterLinearBorFillLabl)
                            .addComponent(filterLinearBorderFillCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(errorMainDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(linearFilterChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okLinearFilterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okLinearFilterButton))
                .addGap(43, 43, 43))
        );

        mainLinearPanel.add(linearFilterChoicePanel);
        linearFilterChoicePanel.setBounds(20, 150, 490, 250);
        linearFilterChoicePanel.getAccessibleContext().setAccessibleName("Input: Filtering process characteristic");

        linearFilerSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        mainLinearPanel.add(linearFilerSeparator);
        linearFilerSeparator.setBounds(560, 10, 10, 590);

        imageLinearFilterPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout imageLinearFilterPanelLayout = new javax.swing.GroupLayout(imageLinearFilterPanel);
        imageLinearFilterPanel.setLayout(imageLinearFilterPanelLayout);
        imageLinearFilterPanelLayout.setHorizontalGroup(
            imageLinearFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 668, Short.MAX_VALUE)
        );
        imageLinearFilterPanelLayout.setVerticalGroup(
            imageLinearFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );
    
     imageLinearFilterScrollPane.setViewportView(imageLinearFilterPanel);
   mainLinearPanel.add(imageLinearFilterScrollPane);
        imageLinearFilterScrollPane.setBounds(590, 160, 620, 290);
        
       
        logoStartLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pointCloudProcessing.jpg"))); // NOI18N
        logoStartLabel.setText("");
        mainLinearPanel.add(logoStartLabel);
        logoStartLabel.setBounds(0, 0, 1230, 590);
        
        
    }// </editor-fold>
    private void okAdapFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {
                   int bdrFll = filterAdapBorderFillCombo.getSelectedIndex();
            int dir = filterLinearDirCombo.getSelectedIndex();
            int fltChz = filterLinearCombo.getSelectedIndex();
            
            int nl = original.NL;
         
            int nc = original.NC;
            int nb = original.nberBand;
            int fr = original.imageFormat;
              int q = adapFilterFactorCombo.getSelectedIndex();
              int adFlt = adapFilterCombo.getSelectedIndex();
          
            
           imageTextF = new javax.swing.JTextField[original.nberBand][original.NL][original.NC];
           
            imgAdapFiltered = new ImageFiltering( 0, 0, nl, nc, fr, nb, bdrFll,  q, 0, 0, adFlt);
  
	imgAdapFiltered.adFilterChosen = adFlt;
        imgAdapFiltered.borderFilling = bdrFll;
        imgAdapFiltered.NC = original.NC;
        imgAdapFiltered.NL = original.NL;
        imgAdapFiltered.nberBand = original.nberBand;
                
        imgAdapFiltered.copyImages( original.originalImg , imgAdapFiltered.imageFiltered);
          imgAdapFiltered.AdaptativeFiltering(adFlt);
             
      imageAdapFilterPanel.removeAll();
        java.awt.GridLayout g = new java.awt.GridLayout((original.NL * original.nberBand), ((original.nberBand * original.NC) + (original.nberBand - 1)));
        imageAdapFilterPanel.setLayout(g);
        imageAdapFilterPanel.validate();
        
    printImages(imageAdapFilterPanel, imgAdapFiltered.imageFiltered ,  nl, nc, nb);
    setVisible(true);
    
        // TODO add your handling code here:
    }
    
    private void okAnalyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
                 
            int bdrFll = morphBorderFillCombo.getSelectedIndex();
           
            int mode = analyzeCombo.getSelectedIndex();
            
            int nl = original.NL;
       
            int nc = original.NC;
   
            int nb = original.nberBand;

            int t1 = Integer.parseInt(tresholdFromTextF.getText());
            int t2 = Integer.parseInt(tresholdToTextF.getText());
              int ord = Integer.parseInt(orderCombo.getText());
              
            int [][][] imBcopy = new int [nb][nl][nc];
            int [][][] myImage = new int [nb][nl][nc];
            imgAnalysis.copyImages(imgAnalysis.instantiateIm(myImage, true), myImage);
             imgAnalysis = new Morphology(t1, t2, nl, nc, 0, nb, bdrFll, 0, 0, 0, 0);
             
             imgAnalysis.copyImages(imgAnalysis.instantiateIm(imgAnalysis.imgB, true), imgAnalysis.imgB);
             
       
           imageTextF = new javax.swing.JTextField[original.nberBand][original.NL][original.NC];
           
            for (int i =0; i < nl; i++)
            {
                    for (int k = 0; k < nb; k++)
                    {   
                        for (int j = 0; j < nc; j++ )
                        {   
                                  
                             imageTextF[k][i][j] = new javax.swing.JTextField(""+original.originalImg[k][i][j]);
                              imageTextF[k][i][j].setColumns(4);  
                              imageTextF[k][i][j].setEditable(false);
                        }
                    }
            }
           

	imgAnalysis.treshold1 = t1;
        imgAnalysis.treshold2 = t2;
        imgAnalysis.borderFilling = bdrFll;
        imgAnalysis.NC = original.NC;
        imgAnalysis.NL = original.NL;
        imgAnalysis.nberBand = original.nberBand;
   
                
        imgAnalysis.copyImages( original.originalImg , imgAnalysis.originalImg);
          
       imgAnalysis.binarize();
       
       imgAnalysis.copyImages(imgAnalysis.instantiateIm(imBcopy, true), imBcopy);
       imgAnalysis.copyImages(imgAnalysis.imgB, imBcopy);
       
      imageAnalysisPanel.removeAll();
        java.awt.GridLayout g = new java.awt.GridLayout((original.NL * original.nberBand), ((original.nberBand * original.NC) + (original.nberBand - 1)));
        imageAnalysisPanel.setLayout(g);
        imageAnalysisPanel.validate();
        
        if (mode == 0)
        {
                
                imgAnalysis.copyImages(imgAnalysis.erode(imBcopy, ord), myImage);      
        }
        else if (mode == 1)
        {
                imgAnalysis.copyImages(imgAnalysis.dilate(imBcopy, ord), myImage);   
        }
        else if (mode == 2)
        {
                imgAnalysis.copyImages(imgAnalysis.opening(imBcopy, ord), myImage);   
        }
        else if (mode == 3)
        {
                imgAnalysis.copyImages(imgAnalysis.closure(imBcopy, ord), myImage);   
        }
        else if (mode == 4)
        {
                imgAnalysis.copyImages(imgAnalysis.whiteTopHat(imBcopy, ord), myImage);   
        }
        else if (mode == 5)
        {
                imgAnalysis.copyImages(imgAnalysis.blackTopHat(imBcopy, ord), myImage);   
        }
        else if (mode == 6)
        {
                imgAnalysis.copyImages(imgAnalysis.squelettization(imBcopy), myImage);   
        }
                
                
    printImages(imageAnalysisPanel, myImage ,  nl, nc, nb);
         for (int i =0; i < nl; i++)
            {
                    for (int k = 0; k < original.nberBand; k++)
                    {   
                        for (int j = 0; j < nc; j++ )
                        {   
                                  
                             if (Integer.parseInt(imageTextF[k][i][j].getText())== 0)
                                 imageTextF[k][i][j].setBackground(Color.DARK_GRAY);
                                 
                        }
                    }
            }
           
    setVisible(true);
        
        // TODO add your handling code here:
    } 
    
    private void binarizeButtonActionPerformed(java.awt.event.ActionEvent evt) {
         
            int bdrFll = morphBorderFillCombo.getSelectedIndex();
           
            int mode = analyzeCombo.getSelectedIndex();
            
            int nl = original.NL;
       
            int nc = original.NC;
   
            int nb = original.nberBand;

            int t1 = Integer.parseInt(tresholdFromTextF.getText());
            int t2 = Integer.parseInt(tresholdToTextF.getText());
         
             imgAnalysis = new Morphology(t1, t2, nl, nc, 0, nb, bdrFll, 0, 0, 0, 0);
             imgAnalysis.copyImages(imgAnalysis.instantiateIm(imgAnalysis.imgB, true), imgAnalysis.imgB);
             
            
           imageTextF = new javax.swing.JTextField[original.nberBand][original.NL][original.NC];
           
            for (int i =0; i < nl; i++)
            {
                    for (int k = 0; k < nb; k++)
                    {   
                        for (int j = 0; j < nc; j++ )
                        {   
                                  
                             imageTextF[k][i][j] = new javax.swing.JTextField(""+original.originalImg[k][i][j]);
                              imageTextF[k][i][j].setColumns(4);  
                              imageTextF[k][i][j].setEditable(false);
                        }
                    }
            }
           

	imgAnalysis.treshold1 = t1;
        imgAnalysis.treshold2 = t2;
        imgAnalysis.borderFilling = bdrFll;
        imgAnalysis.NC = original.NC;
        imgAnalysis.NL = original.NL;
        imgAnalysis.nberBand = original.nberBand;
                
        imgAnalysis.copyImages( original.originalImg , imgAnalysis.originalImg);
          
        imgAnalysis.binarize();
        

             
      imageAnalysisPanel.removeAll();
        java.awt.GridLayout g = new java.awt.GridLayout((original.NL * original.nberBand), ((original.nberBand * original.NC) + (original.nberBand - 1)));
        imageAnalysisPanel.setLayout(g);
        imageAnalysisPanel.validate();
        
    printImages(imageAnalysisPanel, imgAnalysis.imgB ,  nl, nc, nb);
     for (int i =0; i < nl; i++)
            {
                    for (int k = 0; k < nb; k++)
                    {   
                        for (int j = 0; j < nc; j++ )
                        {   
                                  
                             if (Integer.parseInt(imageTextF[k][i][j].getText())== 0)
                                 imageTextF[k][i][j].setBackground(Color.DARK_GRAY);
                                 
                        }
                    }
            }
           
    setVisible(true);
        // TODO add your handling code here:
    }

    private void okLinearFilterButtonActionPerformed(java.awt.event.ActionEvent evt){
        
        
            int bdrFll = filterLinearBorderFillCombo.getSelectedIndex();
            int dir = filterLinearDirCombo.getSelectedIndex();
            int fltChz = filterLinearCombo.getSelectedIndex();
            
            int nl = original.NL;
            
            int nc = original.NC;
        
            int nb = original.nberBand;
       
            int fr = original.imageFormat;
          
            
            
           imageTextF = new javax.swing.JTextField[original.nberBand][original.NL][original.NC];
           
            for (int i =0; i < nl; i++)
            {
                    for (int k = 0; k < nb; k++)
                    {   
                        for (int j = 0; j < nc; j++ )
                        {   
                                  
                             imageTextF[k][i][j] = new javax.swing.JTextField(""+original.originalImg[k][i][j]);
                              imageTextF[k][i][j].setColumns(4);  
                              imageTextF[k][i][j].setEditable(false);
                        }
                    }
            }
           
            imgLinearFiltered = new ImageFiltering(original.NL, original.NC, original.nberBand);
            
           imgLinearFiltered.direction = dir;
	imgLinearFiltered.filterChosen = fltChz;
        imgLinearFiltered.borderFilling = bdrFll;
        imgLinearFiltered.NC = original.NC;
        imgLinearFiltered.NL = original.NL;
        imgLinearFiltered.nberBand = original.nberBand;
                
        imgLinearFiltered.copyImages( original.originalImg , imgLinearFiltered.imageFiltered);

        
          imgLinearFiltered.linearFiltering(fltChz);
             
      imageLinearFilterPanel.removeAll();
        java.awt.GridLayout g = new java.awt.GridLayout((original.NL * original.nberBand), ((original.nberBand * original.NC) + (original.nberBand - 1)));
        imageLinearFilterPanel.setLayout(g);
        imageLinearFilterPanel.validate();
        
    printImages(imageLinearFilterPanel, imgLinearFiltered.imageFiltered ,  nl, nc, nb);
    setVisible(true);
    
        // TODO add your handling code here:
        
         
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        imageMainBandScrollPane = new javax.swing.JScrollPane();
        inMainBandPanel = new javax.swing.JPanel();
        mainChoicePanel4 = new javax.swing.JPanel();
        numColumnLabel4 = new javax.swing.JLabel();
        numBandLabel4 = new javax.swing.JLabel();
        numLineLabel4 = new javax.swing.JLabel();
        imageFormatLabel4 = new javax.swing.JLabel();
        imageFormatCombo4 = new javax.swing.JComboBox();
        errorMainDisplayScrollPane = new javax.swing.JScrollPane();
        errorMainDisplayTextArea4 = new javax.swing.JTextArea();
        resetMainChoiceButtonLabel4 = new javax.swing.JLabel();
        mainChoiceOkButtonLabel4 = new javax.swing.JLabel();
        resetMainButton4 = new javax.swing.JButton();
        okMainButton4 = new javax.swing.JButton();
        numColumnTextF4 = new javax.swing.JTextField();
        numLineTextF4 = new javax.swing.JTextField();
        numBandTextF4 = new javax.swing.JTextField();
        inputModeChoiceLabel4 = new javax.swing.JLabel();
        inputModeChoiceCombo4 = new javax.swing.JComboBox();
        logoMainImageLabel = new javax.swing.JLabel();
        logoStartLabel = new javax.swing.JLabel();
        imageMainDisplayScrollPane = new javax.swing.JScrollPane();
        inMainImagePanel = new javax.swing.JPanel();
        saveImageButton = new javax.swing.JButton();
        saveImageLabel = new javax.swing.JLabel();
        mainSeparator = new javax.swing.JSeparator();
        bandLabel = new javax.swing.JLabel();
        logoMainLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuReturn = new javax.swing.JMenu();
        returnMenuItem = new javax.swing.JMenuItem();
        displayMenu = new javax.swing.JMenu();
        pixByPixMenuItem = new javax.swing.JMenuItem();
        lineByLineMenuItem = new javax.swing.JMenuItem();
        globalMenuItem = new javax.swing.JMenuItem();
        filtersMenu = new javax.swing.JMenu();
        linearFilterMenuItem = new javax.swing.JMenuItem();
        adaptativeFilteringMenu = new javax.swing.JMenu();
        adFilteringMenuItem = new javax.swing.JMenuItem();
        morphologyMenu = new javax.swing.JMenu();
        morphMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainPanel.setPreferredSize(new java.awt.Dimension(1226, 528));
        mainPanel.setLayout(null);

        inMainBandPanel.setBackground(new java.awt.Color(255, 255, 255));
        inMainBandPanel.setLayout(new java.awt.GridLayout(1, 0));
        imageMainBandScrollPane.setViewportView(inMainBandPanel);

        mainPanel.add(imageMainBandScrollPane);
        imageMainBandScrollPane.setBounds(190, 10, 740, 50);

        mainChoicePanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mainChoicePanel4.setOpaque(false);

        numColumnLabel4.setText("Nb column:");

        numBandLabel4.setText("Nb band:");

        numLineLabel4.setText("Nb Line:");

        imageFormatLabel4.setText("Image Format:");

        imageFormatCombo4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8-bits", "16-bits in amplitude", "16-bits in intensity" }));

        errorMainDisplayTextArea4.setColumns(20);
        errorMainDisplayTextArea4.setFont(new java.awt.Font("Mongolian Baiti", 0, 14)); // NOI18N
        errorMainDisplayTextArea4.setForeground(new java.awt.Color(51, 153, 0));
        errorMainDisplayTextArea4.setLineWrap(true);
        errorMainDisplayTextArea4.setRows(5);
        errorMainDisplayTextArea4.setText("... Enter the characteristics of your magnetic band ...");
        errorMainDisplayTextArea4.setToolTipText("");
        errorMainDisplayScrollPane.setViewportView(errorMainDisplayTextArea4);

        resetMainChoiceButtonLabel4.setText("Reset to default:");

        mainChoiceOkButtonLabel4.setText("Confirm:");

        resetMainButton4.setText("Reset");

        okMainButton4.setText("OK");
        okMainButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okMainButton4ActionPerformed(evt);
            }
        });

        numColumnTextF4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numColumnTextF4.setText("3");
        numColumnTextF4.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        numColumnTextF4.setDragEnabled(true);
        numColumnTextF4.setName("");

        numLineTextF4.setColumns(5);
        numLineTextF4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numLineTextF4.setText("2");

        numBandTextF4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numBandTextF4.setText("1");

        inputModeChoiceLabel4.setText("Input Mode");

        inputModeChoiceCombo4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "automatic", "semi-automatic", "manual" }));
        inputModeChoiceCombo4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputModeChoiceCombo4ActionPerformed(evt);
            }
        });

        logoMainImageLabel.setForeground(new java.awt.Color(102, 102, 102));
        logoMainImageLabel.setText("----------------------------  Input: Magnetic band characteristic ---------------------------------------------------");

        javax.swing.GroupLayout mainChoicePanel4Layout = new javax.swing.GroupLayout(mainChoicePanel4);
        mainChoicePanel4.setLayout(mainChoicePanel4Layout);
        mainChoicePanel4Layout.setHorizontalGroup(
            mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainChoicePanel4Layout.createSequentialGroup()
                .addComponent(logoMainImageLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainChoicePanel4Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageFormatLabel4)
                    .addComponent(inputModeChoiceLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputModeChoiceCombo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageFormatCombo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mainChoiceOkButtonLabel4)
                    .addComponent(resetMainChoiceButtonLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resetMainButton4)
                    .addComponent(okMainButton4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(71, 71, 71))
            .addGroup(mainChoicePanel4Layout.createSequentialGroup()
                .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numLineLabel4)
                    .addComponent(numBandLabel4)
                    .addComponent(numColumnLabel4))
                .addGap(32, 32, 32)
                .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numColumnTextF4, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(numLineTextF4)
                    .addComponent(numBandTextF4))
                .addGap(75, 75, 75)
                .addComponent(errorMainDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        mainChoicePanel4Layout.setVerticalGroup(
            mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainChoicePanel4Layout.createSequentialGroup()
                .addComponent(logoMainImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainChoicePanel4Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numColumnTextF4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numColumnLabel4))
                        .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainChoicePanel4Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(numLineLabel4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainChoicePanel4Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numLineTextF4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(numBandLabel4)
                            .addComponent(numBandTextF4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainChoicePanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorMainDisplayScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)))
                .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainChoicePanel4Layout.createSequentialGroup()
                        .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(imageFormatLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imageFormatCombo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inputModeChoiceLabel4)
                            .addComponent(inputModeChoiceCombo4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64))
                    .addGroup(mainChoicePanel4Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(resetMainButton4)
                            .addComponent(resetMainChoiceButtonLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainChoicePanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mainChoiceOkButtonLabel4)
                            .addComponent(okMainButton4))
                        .addContainerGap())))
        );

        mainPanel.add(mainChoicePanel4);
        mainChoicePanel4.setBounds(20, 200, 480, 320);

        logoStartLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/peeta-digital-graffiti.jpg"))); // NOI18N
        logoStartLabel.setText("jLabel1");
        logoStartLabel.setAutoscrolls(true);
        logoStartLabel.setOpaque(true);
        mainPanel.add(logoStartLabel);
        logoStartLabel.setBounds(10, 80, 490, 120);

        inMainImagePanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout inMainImagePanelLayout = new javax.swing.GroupLayout(inMainImagePanel);
        inMainImagePanel.setLayout(inMainImagePanelLayout);
        inMainImagePanelLayout.setHorizontalGroup(
            inMainImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 681, Short.MAX_VALUE)
        );
        inMainImagePanelLayout.setVerticalGroup(
            inMainImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );

        imageMainDisplayScrollPane.setViewportView(inMainImagePanel);

        mainPanel.add(imageMainDisplayScrollPane);
        imageMainDisplayScrollPane.setBounds(570, 220, 500, 210);

        saveImageButton.setText("save");
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });
        mainPanel.add(saveImageButton);
        saveImageButton.setBounds(870, 490, 55, 23);

        saveImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saveImageLabel.setText("Save the image:");
        mainPanel.add(saveImageLabel);
        saveImageLabel.setBounds(680, 490, 180, 20);

        mainSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        mainPanel.add(mainSeparator);
        mainSeparator.setBounds(520, -10, 10, 580);

        bandLabel.setBackground(new java.awt.Color(102, 0, 153));
        bandLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bandLabel.setText("Original Band:");
        mainPanel.add(bandLabel);
        bandLabel.setBounds(80, 20, 90, 20);

        logoMainLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pointCloudProcessing.jpg"))); // NOI18N
        logoMainLabel.setText("jLabel3");
        mainPanel.add(logoMainLabel);
        logoMainLabel.setBounds(10, 0, 1070, 590);

        jButton1.setText("jButton1");
        mainPanel.add(jButton1);
        jButton1.setBounds(1140, 40, 73, 23);

        menuBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        menuReturn.setMnemonic('f');
        menuReturn.setText("Return");

        returnMenuItem.setText("...");
        returnMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnMenuItemActionPerformed(evt);
            }
        });
        menuReturn.add(returnMenuItem);

        menuBar.add(menuReturn);

        displayMenu.setMnemonic('e');
        displayMenu.setText("Display Menu");

        pixByPixMenuItem.setText("Pixel by pixel");
        pixByPixMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pixByPixMenuItemActionPerformed(evt);
            }
        });
        displayMenu.add(pixByPixMenuItem);

        lineByLineMenuItem.setText("Line by Line");
        lineByLineMenuItem.setDoubleBuffered(true);
        lineByLineMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineByLineMenuItemActionPerformed(evt);
            }
        });
        displayMenu.add(lineByLineMenuItem);

        globalMenuItem.setText("Global");
        globalMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                globalMenuItemActionPerformed(evt);
            }
        });
        displayMenu.add(globalMenuItem);

        menuBar.add(displayMenu);

        filtersMenu.setText("Linear Filters");
        filtersMenu.setToolTipText("Display the frame to enter input for linear filtering");
        filtersMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtersMenuActionPerformed(evt);
            }
        });

        linearFilterMenuItem.setText("Go...");
        linearFilterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearFilterMenuItemActionPerformed(evt);
            }
        });
        filtersMenu.add(linearFilterMenuItem);

        menuBar.add(filtersMenu);

        adaptativeFilteringMenu.setText("Adaptative filtering");

        adFilteringMenuItem.setText("Go...");
        adFilteringMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adFilteringMenuItemActionPerformed(evt);
            }
        });
        adaptativeFilteringMenu.add(adFilteringMenuItem);

        menuBar.add(adaptativeFilteringMenu);

        morphologyMenu.setText("Morphological operations");
        morphologyMenu.setToolTipText("Display the frame to enter inputs for image analysis using mathematical morphology ");

        morphMenuItem.setText("Go...");
        morphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                morphMenuItemActionPerformed(evt);
            }
        });
        morphologyMenu.add(morphMenuItem);

        menuBar.add(morphologyMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lineByLineMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineByLineMenuItemActionPerformed
                    
           inMainImagePanel.removeAll();
        repaint();
        
        setVisible(true);
        printImages(inMainImagePanel, original.originalImg, original.NL, original.NC, original.nberBand);
        
        for (int i =0; i <original.NL ; i++)
            {
                    for (int k = 0; k < original.nberBand; k++)
                    {   
                        for (int j = 0; j < original.NC; j++ )
                        {   
  
                             setTheColorLine(i+1,imageTextF[k][i][j]);
                                imageTextF[k][i][j].setVisible(false);
                        }      
            
                    }
      
           }
        setVisible(true);
            
                 for (int i =0; i <original.NL ; i++)
                 {
                    for (int k = 0; k < original.nberBand; k++)
                    {   
                        for (int j = 0; j < original.NC; j++ )
                        { 
                                imageTextF[k][i][j].setVisible(true);        
                          }
                          try{ Thread.sleep(100);}
                                  catch(InterruptedException ae)
                                  {}
                               inMainImagePanel.paint(inMainImagePanel.getGraphics());
                               setVisible(true);
                    }
                 }
                        
            
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_lineByLineMenuItemActionPerformed
   private void setTheColorGlobal(int k, javax.swing.JTextField im)
    {
            if (k < 2)
                im.setBackground(Color.RED);
            
            else if(k >= 2 && k < 3)
                im.setBackground(Color.GRAY);
            
            else if(k >= 3 && k < 4)
                im.setBackground(Color.ORANGE);
            
           else if(k >= 4 && k < 5)
                  im.setBackground(Color.BLUE);
           else if(k >= 5 && k < 6)
                  im.setBackground(Color.GREEN);
                
            else if(k >= 6 && k < 7)
                  im.setBackground(Color.YELLOW);
            
            else if(k >= 7 && k < 8)
                  im.setBackground(Color.PINK);
            else if(k >= 8 && k < 9)
                  im.setBackground(Color.MAGENTA);
             else if(k >= 9 && k < 10)
                 im.setBackground(Color.cyan);
            else 
                 im.setBackground(Color.darkGray);
           
                    
    }
   
      private void setTheColorLine(int k, javax.swing.JTextField im)
    {
            if (k < 2)
                im.setBackground(Color.RED);
            
            else if(k >= 2 && k < 3)
                im.setBackground(Color.GRAY);
            
            else if(k >= 3 && k < 4)
                im.setBackground(Color.ORANGE);
            
           else if(k >= 4 && k < 5)
                  im.setBackground(Color.BLUE);
           else if(k >= 5 && k < 6)
                  im.setBackground(Color.GREEN);
                
            else if(k >= 6 && k < 7)
                  im.setBackground(Color.YELLOW);
            
            else if(k >= 7 && k < 8)
                  im.setBackground(Color.PINK);
            else if(k >= 8 && k < 9)
                  im.setBackground(Color.MAGENTA);
             else if(k >= 9 && k < 10)
                 im.setBackground(Color.cyan);
            else 
                 im.setBackground(Color.darkGray);
           
                    
    }
    private void setTheColor(javax.swing.JTextField im)
    {
            if (Integer.parseInt(im.getText()) < 5)
                im.setBackground(Color.RED);
            
            else if(Integer.parseInt(im.getText()) >= 5 && Integer.parseInt(im.getText()) < 10)
                im.setBackground(Color.GRAY);
            
            else if(Integer.parseInt(im.getText()) >= 10 && Integer.parseInt(im.getText()) < 15)
                im.setBackground(Color.ORANGE);
            
            else if (Integer.parseInt(im.getText()) >= 20 && Integer.parseInt(im.getText()) < 50)
                  im.setBackground(Color.BLUE);
             else if (Integer.parseInt(im.getText()) >= 50 && Integer.parseInt(im.getText()) < 80)
                  im.setBackground(Color.GREEN);
                
            else if (Integer.parseInt(im.getText()) >= 80 && Integer.parseInt(im.getText()) < 150)
                  im.setBackground(Color.YELLOW);
            
            else if (Integer.parseInt(im.getText()) >= 150 && Integer.parseInt(im.getText()) < 200)
                  im.setBackground(Color.PINK);
            else if (Integer.parseInt(im.getText()) >= 200 && Integer.parseInt(im.getText()) < 250)
                  im.setBackground(Color.MAGENTA);
            else
                 im.setBackground(Color.cyan);
           
                    
    }
    private void globalMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_globalMenuItemActionPerformed
        inMainImagePanel.removeAll();
        repaint();
        
        setVisible(true);
        printImages(inMainImagePanel, original.originalImg, original.NL, original.NC, original.nberBand);
        
        for (int i =0; i <original.getNB() ; i++)
            {
                    for (int k = 0; k < original.getNL(); k++)
                    {   
                        for (int j = 0; j < original.getNC(); j++ )
                        {   
                                  
                             setTheColorGlobal(i+1, imageTextF[i][k][j]);
                                imageTextF[i][k][j].setVisible(false);
                        }      
                 
                    }
      
           }
            
                 for (int i =0; i <original.getNB() ; i++)
                 {
                    for (int k = 0; k < original.getNL(); k++)
                    {   
                        for (int j = 0; j < original.getNC(); j++ )
                        { 
                                imageTextF[i][k][j].setVisible(true);        
                          }
                          
                    }
                    try{ Thread.sleep(100);}
                                  catch(InterruptedException ae)
                                  {}
                               inMainImagePanel.paint(inMainImagePanel.getGraphics());
                               setVisible(true);
                 }
                        
               
            
        
        // TODO add your handling code here:
    }//GEN-LAST:event_globalMenuItemActionPerformed

    private void pixByPixMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pixByPixMenuItemActionPerformed
        
        inMainImagePanel.removeAll();
        repaint();
             setVisible(true);
           printImages(inMainImagePanel, original.originalImg, original.NL, original.NC, original.nberBand);
           inMainImagePanel.validate();
        
     
            for (int i =0; i <original.getNL() ; i++)
            {
                    for (int k = 0; k < original.getNB(); k++)
                    {   
                        for (int j = 0; j < original.getNC(); j++ )
                        {   
                                  
                               setTheColor(imageTextF[k][i][j]);
                                imageTextF[k][i][j].setVisible(false);
                        }      
   
                    }
      
           }
            
            setVisible (true);
            
                 for (int i =0; i <original.getNL() ; i++)
                 {
                    for (int k = 0; k < original.getNB(); k++)
                    {   
                        for (int j = 0; j < original.getNC(); j++ )
                        {   
                                  
                               try{ Thread.sleep(100);}
                                  catch(InterruptedException ae)
                                  {}
                               inMainImagePanel.paint(inMainImagePanel.getGraphics());
                                imageTextF[k][i][j].setVisible(true);
                                setVisible(true);
                                    
                             }
                    }
                 }
                        
            
        
    

        // TODO add your handling code here:
    }//GEN-LAST:event_pixByPixMenuItemActionPerformed

    private void filtersMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtersMenuActionPerformed
        
           // TODO add your handling code here:
    }//GEN-LAST:event_filtersMenuActionPerformed

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        int nbElt;

        if (original.imageFormat == 0) {
            nbElt = original.NC * original.NL * original.nberBand;
        } else {
            nbElt = 2 * original.NC * original.NL * original.nberBand;
        }
       
        for (int i = 0; i < nbElt; i++) {
            original.imageBand[i] = Integer.parseInt(bandTextF[i].getText());
        }
        
         
        original.copyImages(original.convertImage(original.imageBand), original.originalImg);
         

        imageTextF = new javax.swing.JTextField[original.nberBand][original.NL][original.NC];
        inMainImagePanel.removeAll();
        java.awt.GridLayout g = new java.awt.GridLayout(original.getNL()+1, ((original.getNB() * original.getNC()) + (original.getNB() - 1)));
        inMainImagePanel.setLayout(g);
        inMainImagePanel.validate();

        printImages(inMainImagePanel, original.originalImg, original.NL, original.NC, original.nberBand);

        setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void okMainButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okMainButton4ActionPerformed

        int nl = Integer.parseInt(numLineTextF4.getText());
        int nc = Integer.parseInt(numColumnTextF4.getText());
        int nb = Integer.parseInt(numBandTextF4.getText());
        int frm = imageFormatCombo4.getSelectedIndex();
        int nbElt = 0;
        gene = new java.util.Random();
              int mode =  inputModeChoiceCombo4.getSelectedIndex();
              
           

        inMainBandPanel.removeAll();
        inMainBandPanel.validate();
        original = new Images(nl, nc, nb, frm);


        if (frm == 0) {
            nbElt = nl * nc * nb;
        } else {
            nbElt = 2 * nl * nc * nb;
        }

        bandTextF = new javax.swing.JTextField[nbElt];
        
        if (mode == 0)
        {     
        for (int i = 0; i < nbElt; i++) {
            int num = gene.nextInt(255);
            bandTextF[i] = new javax.swing.JTextField(""+num);
            bandTextF[i].setColumns(5);
            bandTextF[i].setEditable(false);
            inMainBandPanel.add(bandTextF[i]);
            bandTextF[i].setColumns(3);
        }
        }
        else if (mode == 1) 
        {
          for (int i = 0; i < nbElt; i++) {
              int num = gene.nextInt(255);
            bandTextF[i] = new javax.swing.JTextField(""+num);
            bandTextF[i].setColumns(5);
            inMainBandPanel.add(bandTextF[i]);
            bandTextF[i].setColumns(3);
          }
        }
          else
        {
              for (int i = 0; i < nbElt; i++) 
              {
                bandTextF[i] = new javax.swing.JTextField("");
                bandTextF[i].setColumns(5);
                inMainBandPanel.add(bandTextF[i]);
                bandTextF[i].setColumns(3);
          }
        }

        setVisible(true);


        //TODO add your handling code here:
    }//GEN-LAST:event_okMainButton4ActionPerformed

    private void linearFilterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearFilterMenuItemActionPerformed
  this.getContentPane().remove(mainLinearPanel);
               this.getContentPane().remove(mainPanel);
               this.getContentPane().remove(mainAdapPanel);
               this.getContentPane().remove(mainMorphologyPanel);
               
        repaint();
        
                  javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainLinearPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1259, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainLinearPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
         imageLinearFilterPanel.removeAll();

        pack();
           this.getContentPane().repaint();
           this.getContentPane().validate();
         setVisible(true);
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_linearFilterMenuItemActionPerformed

    private void returnMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnMenuItemActionPerformed
               
          this.getContentPane().remove(mainLinearPanel);
               this.getContentPane().remove(mainPanel);
               this.getContentPane().remove(mainAdapPanel);
               this.getContentPane().remove(mainMorphologyPanel);
               
              repaint();
                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1259, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
           this.getContentPane().repaint();
           this.getContentPane().validate();
         setVisible(true);
                // TODO add your handling code here:
    }//GEN-LAST:event_returnMenuItemActionPerformed

    private void adFilteringMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adFilteringMenuItemActionPerformed
                          
        this.getContentPane().remove(mainLinearPanel);
               this.getContentPane().remove(mainPanel);
               this.getContentPane().remove(mainAdapPanel);
               this.getContentPane().remove(mainMorphologyPanel);
               
               
                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainAdapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1259, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainAdapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
           this.getContentPane().repaint();
           this.getContentPane().validate();
         setVisible(true);
            
        
        // TODO add your handling code here:
    }//GEN-LAST:event_adFilteringMenuItemActionPerformed

    private void morphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_morphMenuItemActionPerformed
               this.getContentPane().remove(mainLinearPanel);
               this.getContentPane().remove(mainPanel);
               this.getContentPane().remove(mainAdapPanel);
               this.getContentPane().remove(mainMorphologyPanel);
               
                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainMorphologyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1259, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainMorphologyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
           this.getContentPane().repaint();
           this.getContentPane().validate();
         setVisible(true);
            
        
        // TODO add your handling code here:
    }//GEN-LAST:event_morphMenuItemActionPerformed

    private void inputModeChoiceCombo4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputModeChoiceCombo4ActionPerformed

          
        // TODO add your handling code here:
    }//GEN-LAST:event_inputModeChoiceCombo4ActionPerformed

    public void printImages(javax.swing.JPanel panel, int [][][] img, int nl, int nc, int nb)
    {
            java.awt.GridLayout g = new java.awt.GridLayout((original.NL), ((original.nberBand * original.NC) + (original.nberBand - 1)));
             panel.setLayout(g);
             panel.validate();      
             
            
            for (int i =0; i < nl; i++)
            {
                    for (int k = 0; k < nb; k++)
                    {   
                        for (int j = 0; j < nc; j++ )
                        {   
                                  
                             imageTextF[k][i][j] = new javax.swing.JTextField(""+img[k][i][j]);
                              imageTextF[k][i][j].setColumns(4);  
                              imageTextF[k][i][j].setEditable(false);
                             panel.add(imageTextF[k][i][j]);
                        }
                        
                        if (k < nb - 1)
                        panel.add(new javax.swing.JTextField(""));
                    }
            }
            
   
    }
    
    
    /**
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MIDappDIP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MIDappDIP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MIDappDIP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MIDappDIP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
               MIDappDIP princ = new MIDappDIP();
                princ.setVisible(true);
                      
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem adFilteringMenuItem;
    private javax.swing.JMenu adaptativeFilteringMenu;
    private javax.swing.JLabel bandLabel;
    private javax.swing.JMenu displayMenu;
    private javax.swing.JScrollPane errorMainDisplayScrollPane;
    private javax.swing.JTextArea errorMainDisplayTextArea4;
    private javax.swing.JMenu filtersMenu;
    private javax.swing.JMenuItem globalMenuItem;
    private javax.swing.JComboBox imageFormatCombo4;
    private javax.swing.JLabel imageFormatLabel4;
    private javax.swing.JScrollPane imageMainBandScrollPane;
    private javax.swing.JScrollPane imageMainDisplayScrollPane;
    private javax.swing.JPanel inMainBandPanel;
    private javax.swing.JPanel inMainImagePanel;
    private javax.swing.JComboBox inputModeChoiceCombo4;
    private javax.swing.JLabel inputModeChoiceLabel4;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuItem lineByLineMenuItem;
    private javax.swing.JMenuItem linearFilterMenuItem;
    private javax.swing.JLabel logoMainImageLabel;
    private javax.swing.JLabel logoMainLabel;
    private javax.swing.JLabel logoStartLabel;
    private javax.swing.JLabel mainChoiceOkButtonLabel4;
    private javax.swing.JPanel mainChoicePanel4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSeparator mainSeparator;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuReturn;
    private javax.swing.JMenuItem morphMenuItem;
    private javax.swing.JMenu morphologyMenu;
    private javax.swing.JLabel numBandLabel4;
    private javax.swing.JTextField numBandTextF4;
    private javax.swing.JLabel numColumnLabel4;
    private javax.swing.JTextField numColumnTextF4;
    private javax.swing.JLabel numLineLabel4;
    private javax.swing.JTextField numLineTextF4;
    private javax.swing.JButton okMainButton4;
    private javax.swing.JMenuItem pixByPixMenuItem;
    private javax.swing.JButton resetMainButton4;
    private javax.swing.JLabel resetMainChoiceButtonLabel4;
    private javax.swing.JMenuItem returnMenuItem;
    private javax.swing.JButton saveImageButton;
    private javax.swing.JLabel saveImageLabel;
    // End of variables declaration//GEN-END:variables
}
